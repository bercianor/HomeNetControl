#!/bin/sh

#    Home Net Control - Monitorizes devices connected to net and notify
#    according with its type. Also monitorizes the bandwidth.
#    Copyright (C) 2016  bercianor  (https://github.com/bercianor)
#    
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

### BEGIN INIT INFO
# Provides:          homenetcontrol
# Required-Start:    $local_fs $network $name $time $syslog
# Required-Stop:     $local_fs $network $name $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       HomeNetControl daemon
### END INIT INFO

. /lib/lsb/init-functions

NAME="HomeNetControl"
PACKAGE="homenetcontrol"
DAEMON="/usr/local/bin/$PACKAGE"
ARGS="-l"
PIDFILE="/var/run/$PACKAGE.pid"
LOGFILE="/var/log/$PACKAGE.log"

# Check for missing binaries
test -x $DAEMON || {
    log_failure_msg "$DAEMON not installed";
    exit 5;
}

case "$1" in
    start)
        # Checked the PID file exists and check the actual status of process
        if [ -e $PIDFILE ]; then
            status_of_proc -p $PIDFILE $DAEMON $NAME >/dev/null && status="0" || status="$?"
            # If the status is SUCCESS then don't need to start again.
            if [ $status = "0" ]; then
                log_warning_msg "Service already running"
                exit 0
            else
                # Start the daemon.
                log_daemon_msg "Starting the process" "$NAME"
                start-stop-daemon -S -o -b -m -p $PIDFILE -a $DAEMON -- $ARGS
                log_end_msg $?
                exit $?
            fi
        else
            # Start the daemon.
            log_daemon_msg "Starting the process" "$NAME"
            start-stop-daemon -S -q -o -b -m -p $PIDFILE -a $DAEMON -- $ARGS
            log_end_msg $?
            exit $?
        fi
        ;;
    stop)
        # Stop the daemon.
        if [ -e $PIDFILE ]; then
            status_of_proc -p $PIDFILE $DAEMON $NAME >/dev/null && status="0" || status="$?"
            if [ "$status" = "0" ]; then
                log_daemon_msg "Shutting down the process" "$NAME"
                start-stop-daemon -K -q -o -R TERM/30/KILL/5 -p $PIDFILE && {
                    /bin/rm -rf $PIDFILE;
                    log_end_msg 0;
                    exit 0;
                } || {
                    log_end_msg $?;
                    exit $?;
                }
            fi
        else
            log_end_msg 0;
            exit 0;
        fi
        ;;
    restart|force-reload)
        # Stop the daemon.
        if [ -e $PIDFILE ]; then
            status_of_proc -p $PIDFILE $DAEMON $NAME >/dev/null && status="0" || status="$?"
            if [ "$status" = "0" ]; then
                log_daemon_msg "Shutting down the process" "$NAME"
                start-stop-daemon -K -q -o -R=TERM/5/KILL/5 -p $PIDFILE -x $DAEMON && {
                    log_end_msg 0;
                } || {
                    log_end_msg $?;
                    exit $?;
                }
            fi
        else
            log_warning_msg "Process $NAME is not running"
        fi
        # Start the daemon.
        log_daemon_msg "Restarting the process" "$NAME"
        start-stop-daemon -S -q -o -b -m -p $PIDFILE -a $DAEMON -- $ARGS
        log_end_msg $?
        exit $?
        ;;
#    reload)
#        # Reload the process. Basically sending some signal to a daemon to reload
#        # it configurations.
#        if [ -e $PIDFILE ]; then
#            log_daemon_msg "Reloading config for" "$NAME"
#            start-stop-daemon -K -q -o -s USR1 -p $PIDFILE -x $DAEMON
#            log_end_msg $?;
#            exit $?
#        else
#            log_end_msg 1;
#            exit 1;
#        fi
#        ;;
#    force-reload)
#        #Try to reload
#        if [ -e $PIDFILE ]; then
#            log_daemon_msg "Reloading config for" "$NAME"
#            start-stop-daemon -K -q -o -s USR1 -p $PIDFILE -x $DAEMON1 && {
#                log_end_msg 0;
#                exit 0;
#            } || {
#                # Stop the daemon.
#                if [ -e $PIDFILE ]; then
#                    status_of_proc -p $PIDFILE $DAEMON $NAME >/dev/null && status="0" || status="$?"
#                    if [ "$status" = "0" ]; then
#                        log_daemon_msg "Shutting down the process" "$NAME"
#                        start-stop-daemon -K -q -o -R=TERM/5/KILL/5 -p $PIDFILE -x $DAEMON && {
#                            log_end_msg 0;
#                        } || {
#                            log_end_msg $?;
#                            exit $?;
#                        }
#                    fi
#                else
#                    log_warning_msg "Process $NAME is not running"
#                fi
#                # Start the daemon.
#                log_daemon_msg "Restarting the process" "$NAME"
#                start-stop-daemon -S -q -o -b -m -p $PIDFILE -a $DAEMON -- $ARGS
#                log_end_msg $?
#                exit $?
#            }
#        else
#            # Stop the daemon.
#            if [ -e $PIDFILE ]; then
#                status_of_proc -p $PIDFILE $DAEMON $NAME >/dev/null && status="0" || status="$?"
#                if [ "$status" = "0" ]; then
#                    log_daemon_msg "Shutting down the process" "$NAME"
#                    start-stop-daemon -K -q -o -R=TERM/5/KILL/5 -p $PIDFILE -x $DAEMON && {
#                        log_end_msg 0;
#                    } || {
#                        log_end_msg $?;
#                        exit $?;
#                    }
#                fi
#            else
#                log_warning_msg "Process $NAME is not running"
#            fi
#            # Start the daemon.
#            log_daemon_msg "Restarting the process" "$NAME"
#            start-stop-daemon -S -q -o -b -m -p $PIDFILE -a $DAEMON -- $ARGS
#            log_end_msg $?
#            exit $?
#        fi
#        ;;
    status)
        log_daemon_msg "Checking for the process" "$NAME"
        # Check the status of the process.
        status_of_proc -p $PIDFILE $DAEMON $NAME process && exit 0 || exit $?
        ;;
    *)
        log_warning_msg "Usage: $0 {start|stop|restart|force-reload|status}"
        exit 3
esac